kind: pipeline
name: default

steps:
  
- name: Deploy Single
  image: alpine
  environment:
    TF_VAR_auth_token:
      from_secret: TF_VAR_auth_token
    TF_VAR_count_x86:
      from_secret: TF_VAR_count_x86
    TF_VAR_count_arm:
      from_secret: TF_VAR_count_arm
    TF_VAR_project_id:
      from_secret: TF_VAR_project_id
  commands:
  - apk --update add curl openssh openssh-client
  - curl --silent --output terraform.zip "https://releases.hashicorp.com/terraform/0.13.0/terraform_0.13.0_linux_amd64.zip"
  - unzip terraform.zip ; rm -f terraform.zip; chmod +x terraform
  - mkdir -p ${HOME}/bin ; export PATH=${PATH}:${HOME}/bin; mv terraform ${HOME}/bin/
  - cp examples/kubernetes-token.tf 00.tf
  - cp examples/kubernetes-controller-pool.tf 01.tf
  - cp examples/kubernetes-node-pool.tf 02.tf
  - terraform -v
  - terraform init 
  - terraform validate
  - export TF_VAR_control_plane_node_count="0"
  - export TF_VAR_cluster_name=$DRONE_COMMIT
  - terraform apply -auto-approve
  - terraform destroy -auto-approve

- name: Deploy HA
  image: alpine
  environment:
    PACKET_TOKEN:
      from_secret: TF_VAR_auth_token
    TF_VAR_auth_token:
      from_secret: TF_VAR_auth_token
    TF_VAR_count_x86:
      from_secret: TF_VAR_count_x86
    TF_VAR_count_arm:
      from_secret: TF_VAR_count_arm
    TF_VAR_project_id:
      from_secret: TF_VAR_project_id
  commands:
  - apk --update add curl openssh-client jq
  - export TF_VAR_cluster_name=$DRONE_COMMIT
  - curl --silent --output terraform.zip "https://releases.hashicorp.com/terraform/0.13.0/terraform_0.13.0_linux_amd64.zip"
  - unzip terraform.zip ; rm -f terraform.zip; chmod +x terraform
  - mkdir -p ${HOME}/bin ; export PATH=${PATH}:${HOME}/bin; mv terraform ${HOME}/bin/
  - cp examples/kubernetes-token.tf 00.tf
  - cp examples/kubernetes-controller-pool.tf 01.tf
  - cp examples/kubernetes-node-pool.tf 02.tf
  - terraform -v
  - terraform init 
  - terraform validate
  - export TF_VAR_control_plane_node_count="1"
  - if terraform apply -auto-approve; then echo "Terraform Applied"; else echo "Failed." ; terraform destroy -auto-approve; fi
  - terraform destroy -auto-approve
